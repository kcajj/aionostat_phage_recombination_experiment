import matplotlib.pyplot as plt
from collections import defaultdict
from Bio import SeqIO

'''

a similar version of this script was integrated in the evo-genome-analysis pipeline
to create a dotplot together with the coverage data of the mapping data

this is just a script to test the code

'''
def extract_seq(path):
    return SeqIO.read(path, 'fasta').seq

k = 50

seq_one = 'TCTTTGTCAAGTGCTGCATGAAAAATTTACAATCTTGTATGGTAGCATTTTTGCGGCCCTGTTTACATTCAGGAGTGTATGTATAATCCTTGGTGTGTGGGCGTTTAGACGTCTAGACGGTCAGAAGTCTGCAGGTCAATATCTAATCTATTGGCTGCTAACTATATCCCCCACAAATAATAAGAAATATAATTGTTATGTGCGTAAACAGTAACCCATGTTATCAATCCCTGTATGTATCGCCAGTGGTGCGCATAATGGGTATTATGTTAAATTGCCCGTAATGATAACTATTCTCACAATGATAGGTATTCTCATTCACTCCCACAAGATAGGTTGCAAATGTTGTGCCATTGTGTGAACGGCCTCACCTATTAATTTGCCTCACTGCCTCGATATTTGAGAATTGTTATAAGAATGAGAATGATTCCCATTTCGTCCGCCTAGCAGCACTCCTGTAGGACAAGCACAAAATCGTGGCATAGCTGGACCTGTTCAGATATTTCTGGCTGGCTCTTCAGGTCTGTGTGGGAAAAGCCAACCCCCTCCGGCGGCGGGGAGGGTGTCAATTAAAAAATTTACGGGGTATATGAAGCGCTCTTCAGGTAAGGCATGTACTATGGGATGAAACCCTCTTCGGGCAATGATATTTGTGGGTGTGATATTTGCTGGAAAGCCAGATATGACGGGACTCCCGGCGGGGCAGGGGTAGTACAGACAGGGAAAATATGGGGATGTAGTTGGGTGAATTGATTGGGCAGGTAGAGTATGGAATATGTTACAAGTATGTTAAATATGGAGGGTGAATATCTGCAGGATTTGTGTGTAAAATCAAAGACT'
seq_two = 'CTCTTTGTCAAGTGCTGCATGAAAAATTTACAAGCTTGTATGGTAGCATTTTTGCGGCCCTGTTTACATTCAGGAGTGTATGTATAATCCTTGGTGTGTGGGCGTTTAGACGTCTGGACGGTAAGAAGTCTGCAGGTTAATATCTAATCTATCGGCTGCTAACTATATCCCACACAAATAGTAAGAAATATAATTGTTATGTGCGTAAACAGTAACCCATGTTATCAATCCCTGTATGTATCGCCAGTGGTGCGCATAATGGGTATTATGTTAAATTGCCCGTAATGATAAAGGTTCTCACAATGATAGGTATTCTCATTCACCCTCACAAAATAGATTGCAAATGTTGTGCCACTGTGTGAACGGCCTCACCTATTAATTTGCCTCACTGCCTCGATATTTGAGAATTATTATAAGAATGAGAAGTATTCCCATTTCGTCCGCCTGGCAGCACTCCAGTCGCTACGGCTCATGACAGGGCAGCACTCCTGTAGGTCAGGTCAAAATCGTGGTAGAATTGGGCCTGTTCAGATATTTCTGGCTGACTCTTCAGGTCTGTGTGGGAAAAGCCAACCTCTCCGGCGGGGCAGGGGGTCATGACGGGAAAATTGCAGGTCAATTAAAAAATTTACGTGGTGTATGAAGCGCTCTTCAGGTAAGGCAGGTATTAGAGGATGAAACCCTCTTCAGGCAATGATATTTGTGGGTGTGATATTTGCTGGAAAGCCAGATATGACGGGACTCCCGGCGGGGATGGGGTAGTACAGACAGGGAAAATATGGGGATGTAGTTGGGTAAATTGATCAGGCAGGTAGAGTATGGATTATGTTACAGGTATGTTAAATATGGAGGTTGAATATCTGTAAGATTTGTGTGTAAAATCAAAGACTTAAGTGGTGTTGTGGTATTTTCTATAAATAATTCAAGTTTAATAGGTAATATTTGTTCTCATCCACTTTGTGTGGTAAACAGATTCAGATGAAATTGGTTTACAAGTGTATACATAATATACAAATTAAAGATACAAGAAACCCCCCTCCCCTTCGGCTACCATTCACCTTTTCCTCTGACTGGTACTTAAACACTTATTCAGACTCTTCAGGTTATCACCCATATATCATATGGCAGTGACTGGTGTCCTCCGGCCCCTCTTTCGTCACCCGTCCGCTTCGCCATGCTAATGCCATAGCCAATGGTTCGGTTGTTCACCCTGTTCACTCAGGTGTATCTCCATACCCCTTCAAACCGAAGAGAACAGAAAACCCGAATTACTCGGTAAAAGAAAAGAGAAGAACTTAATTTTATCAAGATAGGCAAGAATGTCAAGGCATGACTGCTCACTAAACAAGCAAACAGTCATGTGTGGGAGGTAAGTGATTGTGGTTGTAGGAAATTTAGTTGAAAGATGTGTTATAGGTGCTTCCAGCACTTTAGCCGGGTAGCTAATTGTGTGTCAGTCCAGCGGTTCATCCTCTACTTCACTGAAATCAATGTTCATGGTCTCTTCCCAACCATCAATCTCAGCACAAGAGTGGAGTTCTTTAGGGTTTACTCCCAAAGCCTCAGCAACAGAGTCTATATTTAACACCTCTGGCAGGTATGATTCATCGAATTCAAGGTAAATCAGGCCACGAGTGTTGTCAGCTCCACCAAATATCTCTATCTTCATAAAATCTCCTCTGGGAATGAAAGTGTGAACAGGGTTTTATACGTTCTAATGCACAGGAATTATACACGTTTGCCTCTTCAGGCCATGCTTTAGCATGAGGAACCTGTGTGGGCTCGGTGCTTCATAGTCTACCACCTCTGAACTCTTCGTGCTCAGGCATAATAGAGAACCAGATATCTACGATGTCCTCCCACGTCAGGTCATCAGCCTCAGGATTTATCTGGGACGAAGATGAAGAGTCCTCAGAATCTAAGTTTTCCTCTTTAACTGGCTCAGCCAAGGGACACATGGTCACTCCTTTGGATGTCTCTTCAGATGCATGTGTGTGTTGATCATGTTCCACCCGTGAGTATTCCGGCAACAGCTGCTATGGACGTAATGATCATCAGGATCACCACCAAAACCTCTGACAATGTTTTCATTGTGTATCCCATATTCTCCAAATGATGTGTGGATATTATCACTGGAGCGGTAATGTGTCAACAGAAACGCCGCGAGGGTTTGGTTAAAATCCGAGCGTATGGTGATTTGGGTCAAAACGGACGTGCGTTCTCGCTACGCTCGAAAGAGAGACTTGTTTGTAGAAAGCTCTTAAACGCTCTGTAACGAGATTATCTGT'

index=defaultdict(lambda: [])
for pos in range(0,len(seq_one),2):
    kmer=seq_one[pos:pos+k]
    index[kmer].append(pos)
    if len(kmer)<k: break

dot_plot_matrix=[]

for pos in range(0,len(seq_two),2):
    kmer=seq_two[pos:pos+k]
    for mapping_position in index[kmer]:
        dot_plot_matrix.append([mapping_position, pos])

dot_plot=[]

for map_position in dot_plot_matrix:
    for counter in range(k):
        point=(map_position[0]+counter, map_position[1]+counter)
        if point not in dot_plot:
            dot_plot.append(point)

x=[]
y=[]
for (dpx,dpy) in dot_plot:
    x.append(dpx)
    y.append(dpy)

plt.scatter(x,y,s=5)
plt.show()